<?php
/**
 * apiScalewayBackupHelper.class.php
 *
 * @package    apiScaleway
 * @subpackage API
 * @author     Jonathan <skutter@imprecision.net>
 * @version    v1.0.0 (25/06/2019)
 * @copyright  Copyright (c) 2019, Jonathan
 */

namespace apiScaleway;

/**
 * apiScalewayBackupHelper
 * 
 * Simple API gateway to Scaleway cloud hosting services. Primariliy to allow remote backup functionality.
 */
class apiScalewayBackupHelper extends apiScaleway {

    /**
     * Set config @see config/backup.config.php
     * 
     * Automatically set the key details needed to connect to Scaleway API and perform basic actions
     *
     * @param array $config
     * @return object apiScalewayBackupHelper
     */
    public function auto_config(array $config) {
        $this->set_zone($config['zone'])->set_token($config['token'])->set_org($config['organization']);
        return $this;
    }

    /**
     * Perform config instructions
     * 
     * Using the config, automatically configure, connect and perform actions to Scaleway API
     *
     * @param array $config User config detailing account and items to backup @see config/backup.config.php
     * @return array List of messages from API
     */
    public function auto_backup(array $config) {
        $this->auto_config($config);

        $output = [];

        foreach ($config['backup'] as $backup_type => $backup_details) {
            foreach ($backup_details as $backup) {

                $sep        = "_";
                $datetime   = date('Ymd-His');
                $prefix     = "auto-" . $backup_type;
                $name_final = $prefix . $sep . $datetime . $sep . $backup['name'];
                $existing   = [];
                $purge      = ($backup['purge'] > -1) ? true : false;
                $purgelist  = [];

                if ($backup_type === 'snapshots') {
                    if ($purge) {
                        $existing = $this->list_snapshots();
                    }
                    $output[] = $this->set_volume($backup['id'])->create_snapshot($name_final);
                } else if ($backup_type === 'servers') {
                    if ($purge) {
                        $existing = $this->list_images();
                    }
                    $output[] = $this->set_server($backup['id'])->create_backup($name_final);
                }

                $output[] = $backup_type . "\t" . $backup['id'] . "\t" . $backup['name'] . "\t" . $backup['purge'] . "\t" . $name_final;
                $output[] = $existing;

                if ($purge) {
                    // Foreach existing item, see if it looks like an item generated by this system previously
                    foreach ($existing as $eid => $ename) {
                        $ename_bits = explode($sep, $ename);
                        if ((count($ename_bits) == 3) && ($ename_bits[0] == $prefix) && (preg_match('/^[0-9]{8}\-[0-9]{6}$/', $ename_bits[1]) === 1) && ($ename_bits[2] == $backup['name'])) {
                            $purgelist[$ename_bits[1]] = $eid;
                        }
                    }

                    // Sort by date (key)
                    krsort($purgelist);

                    // Remove the n-most-recent (defined by $backup['purge'])
                    for ($i=0; $i<$backup['purge']; $i++) {
                        array_shift($purgelist);
                    }

                    $output[] = $purgelist;

                    // For any items remaining, send delete instructions to the API
                    foreach ($purgelist as $pts => $pid) {
                        if ($backup_type === 'snapshots') {
                            $output[] = $this->delete_snapshot($pid);
                        } else if ($backup_type === 'servers') {
                            $output[] = $this->delete_image($pid);
                        }
                    }
                }
            }
        }

        return $output;
    }

}